1. General Dependencies

To use all provided utilities, there are some packages we need to install first, you can copy these commands as it is, but it is recommended to learn and understand what each command and software does:

sudo apt install -y \
	ninja-build \
	exiftool \
	python3-empy \
	python3-toml \
	python3-numpy \
	python3-yaml \
	python3-dev \
	python3-pip \
	ninja-build \
	protobuf-compiler \
	libeigen3-dev \
	genromfs \
    libignition-rendering3 \
    libgstreamer-plugins-base1.0-dev \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-base \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-ugly

pip install \
	pandas \
	jinja2 \
	pyserial \
	cerberus \
	pyulog \
	numpy \
	toml \
	pyquaternion \
    kconfiglib \
    --user packaging
    --user jsonschema
    
2. ROS-Neotic Installation

	Step 1. Configure your Ubuntu repositories
	Configure your Ubuntu repositories to allow “restricted,” “universe,” and “multiverse.” You can follow the Ubuntu guide 382 for instructions on doing this.

	Step 2. Setup your sources.list
	Setup your computer to accept software from packages.ros.org 216.

	sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'

	Step 3. Set up your keys

	sudo apt install curl # if you haven't already installed curl
	curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -

	Step 4. Installation

	sudo apt update
	sudo apt install ros-noetic-desktop-full

	Step 5. Environment Setup

	source /opt/ros/noetic/setup.bash

	It can be convenient to automatically source this script every time a new shell is launched. These commands will do that for you.

	echo "source /opt/ros/noetic/setup.bash" >> ~/.bashrc
	source ~/.bashrc

	Step 6. Dependencies for building packages

	sudo apt install python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool build-essential
	sudo apt install python3-rosdep
	sudo rosdep init
	rosdep update

3. MAVROS Installation

MAVROS is a communication node based on MAVLink for ROS that is specially designed for communication between the drone and the companion computer. To install it, follow the following instructions:

sudo apt install python3-catkin-tools python3-rosinstall-generator python3-osrf-pycommon -y

	Step 1. Create the workspace:

	mkdir -p ~/catkin_ws/src
	cd ~/catkin_ws
	catkin init
	wstool init src

	Step 2. Install MAVLink: we use the Kinetic reference for all ROS distros as it’s not distro-specific and up to date

	rosinstall_generator --rosdistro kinetic mavlink | tee /tmp/mavros.rosinstall

	Step 3. Install MAVROS: get source (upstream - released)

	rosinstall_generator --upstream mavros | tee -a /tmp/mavros.rosinstall

	alternative

	rosinstall_generator --upstream-development mavros | tee -a /tmp/mavros.rosinstall

	Step 4. Create workspace & deps

	wstool merge -t src /tmp/mavros.rosinstall
	wstool update -t src -j4
	rosdep install --from-paths src --ignore-src -y

	Step 5. Install GeographicLib datasets:

	./src/mavros/mavros/scripts/install_geographiclib_datasets.sh

	Step 6. Build source

	catkin build

	Step 7. Make sure that you use setup.bash

	source devel/setup.bash

4. PX4 Firmware Installation

cd ~/catkin_ws/src
git clone https://github.com/PX4/PX4-Autopilot.git --recursive
cd PX4-Autopilot/
make px4_sitl_default gazebo

Now you should see a window pop out and a drone is centered in the middle of the environment.
  
